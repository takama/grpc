// Code generated by protoc-gen-go. DO NOT EDIT.
// source: info/info.proto

package info

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A Report about the service
type Report struct {
	// Version of the service
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Build date of the service
	Date string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	// Repository name
	Repo                 string   `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Report) Reset()         { *m = Report{} }
func (m *Report) String() string { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()    {}
func (*Report) Descriptor() ([]byte, []int) {
	return fileDescriptor_3955287c00436ed0, []int{0}
}

func (m *Report) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Report.Unmarshal(m, b)
}
func (m *Report) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Report.Marshal(b, m, deterministic)
}
func (m *Report) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Report.Merge(m, src)
}
func (m *Report) XXX_Size() int {
	return xxx_messageInfo_Report.Size(m)
}
func (m *Report) XXX_DiscardUnknown() {
	xxx_messageInfo_Report.DiscardUnknown(m)
}

var xxx_messageInfo_Report proto.InternalMessageInfo

func (m *Report) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Report) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Report) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

// A Health report about the service
type Health struct {
	// Health state
	Alive                bool     `protobuf:"varint,1,opt,name=alive,proto3" json:"alive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Health) Reset()         { *m = Health{} }
func (m *Health) String() string { return proto.CompactTextString(m) }
func (*Health) ProtoMessage()    {}
func (*Health) Descriptor() ([]byte, []int) {
	return fileDescriptor_3955287c00436ed0, []int{1}
}

func (m *Health) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Health.Unmarshal(m, b)
}
func (m *Health) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Health.Marshal(b, m, deterministic)
}
func (m *Health) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Health.Merge(m, src)
}
func (m *Health) XXX_Size() int {
	return xxx_messageInfo_Health.Size(m)
}
func (m *Health) XXX_DiscardUnknown() {
	xxx_messageInfo_Health.DiscardUnknown(m)
}

var xxx_messageInfo_Health proto.InternalMessageInfo

func (m *Health) GetAlive() bool {
	if m != nil {
		return m.Alive
	}
	return false
}

func init() {
	proto.RegisterType((*Report)(nil), "info.Report")
	proto.RegisterType((*Health)(nil), "info.Health")
}

func init() { proto.RegisterFile("info/info.proto", fileDescriptor_3955287c00436ed0) }

var fileDescriptor_3955287c00436ed0 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xcf, 0x4a, 0x6b, 0x31,
	0x10, 0xc6, 0x69, 0x6f, 0x6f, 0xff, 0x84, 0x82, 0x12, 0x44, 0x0e, 0x55, 0x44, 0x0e, 0x88, 0x2e,
	0x6c, 0x82, 0xfa, 0x04, 0x0a, 0xa5, 0xea, 0xb2, 0x4b, 0x77, 0xe9, 0x71, 0x9a, 0x06, 0xdb, 0x4c,
	0xc8, 0x99, 0x56, 0xdc, 0xfa, 0x04, 0x82, 0x8f, 0xe6, 0x2b, 0xf8, 0x20, 0x92, 0xc9, 0xe9, 0xca,
	0x85, 0x9b, 0xe4, 0x9b, 0x6f, 0x26, 0xbf, 0xc9, 0x8c, 0xd8, 0x73, 0x7e, 0x81, 0x3a, 0x1d, 0x2a,
	0x44, 0x24, 0x94, 0x9d, 0xa4, 0x47, 0xc7, 0x16, 0xd1, 0xae, 0x40, 0x9b, 0xe0, 0xb4, 0xf1, 0x1e,
	0xc9, 0x90, 0x43, 0x5f, 0xe7, 0x9a, 0xd1, 0x51, 0x93, 0xe5, 0x68, 0xbe, 0x59, 0x68, 0x58, 0x07,
	0x7a, 0x6b, 0x92, 0x97, 0x7c, 0x55, 0x63, 0x0b, 0x7e, 0x5c, 0xbf, 0x1a, 0x6b, 0x21, 0x6a, 0x0c,
	0xfc, 0xfc, 0x37, 0xaa, 0x7c, 0x14, 0xdd, 0x19, 0x04, 0x8c, 0x24, 0x0b, 0xd1, 0xdb, 0x42, 0xac,
	0x1d, 0xfa, 0xa2, 0x75, 0xda, 0xba, 0x18, 0xcc, 0x76, 0xa1, 0x94, 0xa2, 0xf3, 0x6c, 0x08, 0x8a,
	0x36, 0xdb, 0xac, 0x93, 0x17, 0x21, 0x60, 0xf1, 0x2f, 0x7b, 0x49, 0x97, 0x27, 0xa2, 0x7b, 0x0f,
	0x66, 0x45, 0x4b, 0x79, 0x20, 0xfe, 0x9b, 0x95, 0xdb, 0x02, 0x93, 0xfa, 0xb3, 0x1c, 0x5c, 0x7f,
	0xb4, 0x44, 0xe7, 0xc1, 0x2f, 0x50, 0xde, 0x8a, 0xde, 0x14, 0x88, 0xe5, 0xa1, 0xca, 0xb3, 0xa8,
	0xdd, 0x2c, 0x6a, 0x92, 0x66, 0x19, 0x0d, 0x15, 0xef, 0x24, 0xff, 0xad, 0xdc, 0x7f, 0xff, 0xfa,
	0xfe, 0x6c, 0x0b, 0xd9, 0xd7, 0xdb, 0x2b, 0x5e, 0x96, 0x9c, 0x88, 0xc1, 0x14, 0xa8, 0x69, 0xf7,
	0x07, 0x24, 0x57, 0x95, 0x92, 0x21, 0x43, 0x29, 0x12, 0x64, 0xc9, 0xde, 0xdd, 0xf9, 0xd3, 0x99,
	0x75, 0xb4, 0xdc, 0xcc, 0x55, 0x85, 0x6b, 0x4d, 0xe6, 0xc5, 0xac, 0x8d, 0xb6, 0x31, 0x54, 0xba,
	0x42, 0x4f, 0xd1, 0x54, 0x54, 0x73, 0xbf, 0x79, 0x97, 0xd1, 0x37, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x01, 0xaf, 0x40, 0x4b, 0xb0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoClient interface {
	// Get an information about the service
	GetInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Report, error)
	// Get a health information for the service
	GetHealth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Health, error)
}

type infoClient struct {
	cc *grpc.ClientConn
}

func NewInfoClient(cc *grpc.ClientConn) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) GetInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Report, error) {
	out := new(Report)
	err := c.cc.Invoke(ctx, "/info.Info/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetHealth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/info.Info/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
type InfoServer interface {
	// Get an information about the service
	GetInfo(context.Context, *empty.Empty) (*Report, error)
	// Get a health information for the service
	GetHealth(context.Context, *empty.Empty) (*Health, error)
}

func RegisterInfoServer(s *grpc.Server, srv InfoServer) {
	s.RegisterService(&_Info_serviceDesc, srv)
}

func _Info_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetHealth(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Info_serviceDesc = grpc.ServiceDesc{
	ServiceName: "info.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Info_GetInfo_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _Info_GetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "info/info.proto",
}
