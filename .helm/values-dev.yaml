## Default values for grpc.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Count of instances
##
replicaCount: 2

## Count of revisions saved in release history
##
revisionHistoryLimit: 1

## Time of accepting requests to the service ( seconds )
##
minReadySeconds: 10

## Value which provide max unavailable state ( percents )
##
maxUnavailable: 50%

## Max count of surge replicas
##
maxSurge: 1

## Termination grace period
## It's value of period in seconds between SIGTERM and SIGKILL signals
##
gracePeriod: 30

image:
  ## Docker Registry/Hub image name and tag
  ##
  registry: gcr.io/drs-017
  name: grpc
  tag: v0.0.0

  ## Docker Registry/Hub auth secret name, always use `registry-pull-secret` if registry inside if k8s
  ##
  # pullSecretName: registry-pull-secret

  ## Docker Registry/Hub image pull policy
  ##
  pullPolicy: Always

ingress:
  ## If true, Ingress will be created
  ##
  enabled: false
  tls:
    enabled: false

  ## Prefix for API (Example: /api/v1/)
  ##
  prefix: /

  ## Ingress annotations (e.g. `Let's encrypt` annotations to generating certs)
  ##
  annotations:
    ## kubernetes.io/ingress.class: nginx
    ## kubernetes.io/tls-acme: 'true'
    prometheus.io/probe: 'true'

  ## Ingress host feature allow access to service through host
  ## example: https://hostname
  ## Must be provided if Ingress is enabled
  ##
  hostBased:
    hosts:
    - grpc.op-dev.net

    ## Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ##
    tls:
    - secretName: op-dev.net-secret
      hosts:
      - grpc.op-dev.net

  # ## Ingress path feature allow access to service through path
  # ## example: https://hostname/namespace/servicename
  # ## Must be provided if Ingress is enabled
  # ##
  # pathBased:
  #   hosts:
  #   - services.op-dev.net

  #   ## Ingress TLS configuration
  #   ## Secrets must be manually created in the namespace
  #   ## except of case when annotation `kubernetes.io/tls-acme: 'true'` is present
  #   ##
  #   tls:
  #   - secretName: op-dev.net-secret
  #     hosts:
  #     - services.op-dev.net

## Ingress Route (Contour) - custom Ingress controller with Envoy
## to proxy all services via 1 IP address.
##
ingressRoute:
  ## If true, Ingress will be created
  ##
  enabled: true

  ## TLS configs
  ##
  tls:
    ##
    enabled: true
    ##
    secretName: op-dev.net-secret

  ## Annotations
  ##
  annotations:
    contour.heptio.com/ingress.class: contour
    contour.heptio.com/tls-minimum-protocol-version: TLSv1_2
    kubernetes.io/ingress.allow-http: false

  ## Ingress route hosts
  ##
  hosts:
    ## gRPC service host
    - name: grpc
      host: grpc.op-dev.net
      path: /
      port: 8000

service:
  ## App name service
  name: grpc

  ## Service Type
  ## For minikube, recommended value NodePort,
  ## For GKE - LoadBalancer
  ## elsewhere - ClusterIP
  ##
  type: LoadBalancer

  ## Static IP of load balancer
  ##
  loadBalancerIP: "35.204.249.1"

  ## IP ranges with access to the service (via load balancer)
  ## By default, all have access to it (if the list is empty)
  ##
  loadBalancerSourceRanges:
  - 10.0.0.0/8 # Internal network
  - 109.72.83.32/32 # VPN Openprovider
  - 185.107.225.16/32 # OpenVPN Openprovider
  - 5.128.36.134/32 # NSK office
  - 213.236.28.3/32 # idolzhikov (spain home 1)
  - 185.96.235.53/32 # idolzhikov (spain home 2)
  - 94.180.117.53/32 # vsaveliev (home)
  - 185.103.159.160/32 # vsaveliev-001.op-dev.net (for development)

  ## Service annotations (e.g. Prometheus annotations)
  ##
  annotations:
    prometheus.io/probe: 'true'
    prometheus.io/probe-path: '/v1alpha/health'
    prometheus.io/probe-scheme: 'https'

  ## gRPC TLS attributes
  ##
  grpcTLS:
    ## gRPC TLS port
    ##
    port: 8001

  ## Service information
  ##
  info:
    ## Pod exposed info/health port
    ##
    port: 8080

  ## Logger format and level
  ##
  logger:
    ## logging format (available formats: json, txt)
    format: json
    ## logging level (0 - debug, 1 - info, 2 - warning, etc)
    level: 0

    ## logging time
    time: false

livenessProbe:
  ## Liveness Probe
  ## If enabled k8s check http end-point /healthz for "Ok" status 200
  ##
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  failureThreshold: 3

readinessProbe:
  ## Rediness Probe
  ## If enabled k8s check http end-point /readyz for "Ok" status 200
  ##
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  failureThreshold: 3

## Resource requests and limits
## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    cpu: 30m
    memory: 64Mi
  requests:
    cpu: 30m
    memory: 32Mi
