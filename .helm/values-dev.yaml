## Default values for grpc.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Count of instances
##
replicaCount: 2

## Count of revisions saved in release history
##
revisionHistoryLimit: 1

## Time of accepting requests to the service ( seconds )
##
minReadySeconds: 10

## Value which provide max unavailable state ( percents )
##
maxUnavailable: 50%

## Max count of surge replicas
##
maxSurge: 1

## Termination grace period
## It's value of period in seconds between SIGTERM and SIGKILL signals
##
gracePeriod: 30

image:
  ## Docker Registry/Hub image name and tag
  ##
  registry: gcr.io/drs-017
  name: grpc
  tag: v0.0.0

  ## Docker Registry/Hub auth secret name, always use `registry-pull-secret` if registry inside if k8s
  ##
  # pullSecretName: registry-pull-secret

  ## Docker Registry/Hub image pull policy
  ##
  pullPolicy: Always

ingress:
  ## If true, Ingress will be created
  ##
  enabled: false
  tls:
    enabled: false

  ## Prefix for API (Example: /api/v1/)
  ##
  prefix: /

  ## Ingress annotations (e.g. `Let's encrypt` annotations to generating certs)
  ##
  annotations:
    ## kubernetes.io/ingress.class: nginx
    ## kubernetes.io/tls-acme: 'true'
    prometheus.io/probe: 'true'

  ## Ingress host feature allow access to service through host
  ## example: https://hostname
  ## Must be provided if Ingress is enabled
  ##
  hostBased:
    hosts:
    - grpc.example.net

    ## Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ##
    tls:
    - secretName: grpc.example.net-secret
      hosts:
      - grpc.example.net

  # ## Ingress path feature allow access to service through path
  # ## example: https://hostname/namespace/servicename
  # ## Must be provided if Ingress is enabled
  # ##
  pathBased:
    hosts:
    - services.example.net

    ## Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ## except of case when annotatoon `kubernetes.io/tls-acme: 'true'` is present
    ##
    tls:
    - secretName: services.example.net-secret
      hosts:
      - services.example.net

service:
  ## App container name
  ##
  name: grpc

  ## Service Type
  ## For minikube, recommended value NodePort,
  ## For GKE - LoadBalancer
  ## elsewhere - ClusterIP
  ##
  type: LoadBalancer

  ## Static IP of load balancer
  ##
  # loadBalancerIP: "133.133.133.133"

  ## IP ranges with access to the service (via load balancer)
  ## By default, all have access to it (if the list is empty)
  ##
  # loadBalancerSourceRanges:
  # - 100.100.100.32/32 # VPN

  ## Service annotations (e.g. Prometheus annotations)
  ##
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/probe: 'true'
    prometheus.io/port: '8080'
    prometheus.io/path: '/metrics'

  ## gRPC protocol attributes
  ##
  grpc:
    ## gRPC exposed port
    ##
    port: 8000

  ## Service information
  ##
  info:
    ## Pod exposed info/health port
    ##
    port: 8080

    ## Include a statistics in information details
    ##
    statistics: true

  ## Logger format and level
  ##
  logger:
    ## logging format (available formats: json, txt)
    format: json
    ## logging level (0 - debug, 1 - info, 2 - warning, etc)
    level: 0

    ## logging time
    time: false

livenessProbe:
  ## Liveness Probe
  ## If enabled k8s check http end-point /healthz for "Ok" status 200
  ##
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  failureThreshold: 3

readinessProbe:
  ## Rediness Probe
  ## If enabled k8s check http end-point /readyz for "Ok" status 200
  ##
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  failureThreshold: 3

## Resource requests and limits
## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    cpu: 30m
    memory: 64Mi
  requests:
    cpu: 30m
    memory: 32Mi
