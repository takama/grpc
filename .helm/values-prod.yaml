## Default values for grpc.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Count of instances
##
replicaCount: 3

## Count of revisions saved in release history
##
revisionHistoryLimit: 5

## Time of accepting requests to the service ( seconds )
##
minReadySeconds: 10

## Value which provide max unavailable state ( percents )
##
maxUnavailable: 25%

## Max count of surge replicas
##
maxSurge: 1

## Termination grace period
## It's value of period in seconds between SIGTERM and SIGKILL signals
##
gracePeriod: 30

image:
  ## Docker Registry/Hub image name and tag
  ##
  registry: gcr.io/drs-017
  name: grpc
  tag: v0.0.0

  ## Docker Registry/Hub auth secret name, always use `registry-pull-secret` if registry inside if k8s
  ##
  # pullSecretName: registry-pull-secret

  ## Docker Registry/Hub image pull policy
  ##
  pullPolicy: Always

## Ingress (Contour) - Ingress controller with Envoy
## to proxy all services via 1 IP address.
##
ingress:
  ## If true, Ingress will be created
  ##
  enabled: true

  ## TLS configs
  ##
  tls:
    ##
    enabled: true
    ##
    secretName: op-prod.net-secret

  ## Annotations
  ##
  annotations:
    contour.heptio.com/ingress.class: contour
    contour.heptio.com/tls-minimum-protocol-version: TLSv1_2
    kubernetes.io/ingress.allow-http: false

  ## Ingress route hosts
  ##
  hosts:
    ## gRPC service host
    - name: grpc
      host: grpc.op-prod.net
      path: /
      port: 8000

service:
  ## App name service
  name: grpc

  ## Service Type
  ## For minikube, recommended value NodePort,
  ## For GKE - LoadBalancer
  ## elsewhere - ClusterIP
  ##
  type: ClusterIP

  ## Service annotations (e.g. Prometheus annotations)
  ##
  annotations:
    prometheus.io/probe: "true"
    prometheus.io/probe-path: "/v1/health"
    prometheus.io/probe-scheme: "http"
    contour.heptio.com/upstream-protocol.h2c: "8000,grpc"

  ## gRPC attributes
  ##
  grpc:
    ## gRPC port
    ##
    port: 8000

  ## Service information
  ##
  info:
    ## Pod exposed info/health port
    ##
    port: 8080
    ## Service statistics
    ##
    statistics: false

  ## Client connection to the service
  ##
  client:
    host: grpc.op-prod.net
    port: 443
    ## use TLS or not
    insecure: false
    ## using of the Envoy proxy as a client balancer
    envoyProxy: true
    ## wait until gRPC stream will be ready
    waitForReady: true
    ## use exponential back off with maximum delay in seconds
    backOffDelay: 15
    ## retry settings
    retry:
      ## reasons to retry in connection
      reason:
        ## x-envoy-retry-on
        primary: "5xx,connect-failure"
        ## x-envoy-retry-grpc-on
        grpc: "cancelled,deadline-exceeded,internal,resource-exhausted,unavailable"
      ## count of retries
      count: 30
      ## max timeout second
      timeout: 30

  ## Logger format and level
  ##
  logger:
    ## logging format (available formats: json, txt)
    format: json
    ## logging level (0 - debug, 1 - info, 2 - warning, etc)
    level: 0

    ## logging time
    time: false

livenessProbe:
  ## Liveness Probe
  ## If enabled k8s check http end-point /healthz for "Ok" status 200
  ##
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  failureThreshold: 3

readinessProbe:
  ## Readiness Probe
  ## If enabled k8s check http end-point /readyz for "Ok" status 200
  ##
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  failureThreshold: 3

## Resource requests and limits
## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    cpu: 30m
    memory: 64Mi
  requests:
    cpu: 30m
    memory: 32Mi
