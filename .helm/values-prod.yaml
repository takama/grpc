## Default values for grpc.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Count of instances
##
replicaCount: 3

## Count of revisions saved in release history
##
revisionHistoryLimit: 5

## Time of accepting requests to the service ( seconds )
##
minReadySeconds: 10

## Value which provide max unavailable state ( percents )
##
maxUnavailable: 25%

## Max count of surge replicas
##
maxSurge: 1

## Termination grace period
## It's value of period in seconds between SIGTERM and SIGKILL signals
##
gracePeriod: 30

image:
  ## Docker Registry/Hub image name and tag
  ##
  registry: gcr.io/drs-017
  name: grpc
  tag: v0.1.8

  ## Docker Registry/Hub auth secret name, always use `registry-pull-secret` if registry inside if k8s
  ##
  # pullSecretName: registry-pull-secret

  ## Docker Registry/Hub image pull policy
  ##
  pullPolicy: Always

## Ingress (Contour) - Ingress controller with Envoy
## to proxy all services via 1 IP address.
##
ingress:
  ## If true, Ingress will be created
  ##
  enabled: true

  ## Use Contour ingress routes
  ##
  contour:
    enabled: true
    annotations:
      kubernetes.io/ingress.allow-http: false
      contour.heptio.com/ingress.class: contour
      contour.heptio.com/tls-minimum-protocol-version: TLSv1_2

  ## TLS configs
  ##
  tls:
    ##
    enabled: true
    ##
    secretName: grpc-service-tls

  ## Annotations
  ##
  annotations:
    ## Uses reserved external IP name
    kubernetes.io/ingress.global-static-ip-name: grpc-lb

  ## Ingress route hosts
  ##
  hosts:
    ## gRPC service host
    - name: grpc
      host: grpc.your-production-domain.net
      path: /
      port: 8000

service:
  ## App name service
  name: grpc

  ## Service Type
  ## For minikube, recommended value NodePort,
  ## For GKE - LoadBalancer in case of TCP or NodePort in case of HTTP
  ## elsewhere - ClusterIP
  ##
  type: ClusterIP

  ## Headless service
  ##
  ## if true it could not use Cluster IP
  headless: true

  ## Service annotations (e.g. Prometheus annotations)
  ##
  annotations:
    prometheus.io/probe: "true"
    prometheus.io/probe-path: "/v1/health"
    prometheus.io/probe-scheme: "http"
    ## Allows to use HTTP/2 for named port
    ## cloud.google.com/app-protocols: '{"grpc":"HTTP2"}'
    ## Enables container-native load balancing
    ## cloud.google.com/neg: '{"ingress": true}'
    contour.heptio.com/upstream-protocol.h2c: "8000,grpc"

  ## gRPC attributes
  ##
  grpc:
    ## gRPC port
    ##
    port: 8000

  ## Service information
  ##
  info:
    ## Pod exposed info/health port
    ##
    port: 8080
    ## Service statistics
    ##
    statistics: false

  ## Service connection parameters
  ##
  connection:
    ## Time in seconds after which an idle connection would be closed by sending a GoAway.
    ## Zero means an infinity value
    idle: 0

    ## Time in seconds when a connection may exist before it will be closed by sending a GoAway.
    ## Zero means an infinity value
    age: 0

    ## Additive period in seconds after "age" which the connection will be forcibly closed.
    ## Zero means an infinity value
    grace: 0

    ## Keepalive parameters
    keepalive:
      ## After a duration of this time if the server doesn't see any activity it
      ## pings the client to see if the transport is still alive (seconds)
      time: 300

      ## After having pinged for keepalive check, the server waits timeout and
      ## if no activity is seen even after that the connection is closed (seconds)
      timeout: 10

  ## Client connection to the service
  ##
  client:
    ## Type of scheme used in grpc.Dial (dns, unix, etc)
    scheme: grpc

    ## Host used in target of grpc.Dial together with scheme (dns:///host)
    host: grpc.your-production-domain.net

    ## List of servers with ports used in balancing
    sockets:
      - "grpc.your-production-domain.net:443"
      - "grpc.your-production-domain.net:443"

    ## Type of balancing algorithm
    balancer: "round_robin"

    ## use TLS or not
    insecure: false

    ## using of the Envoy proxy as a client balancer
    envoyProxy: true

    ## wait until gRPC stream will be ready
    waitForReady: true

    ## request maximum timeout in second
    timeout: 30

    ## Keepalive parameters
    keepalive:
      ## After a duration of this time if the client doesn't see any activity it
      ## pings the server to see if the transport is still alive (seconds)
      time: 10

      ## After having pinged for keepalive check, the client waits timeout and
      ## if no activity is seen even after that the connection is closed (seconds)
      timeout: 5

      ## If true, client sends keepalive pings even with no active RPC.
      force: false

    ## retry settings
    retry:
      ## If active it will use in all connections
      active: true

      ## Envoy retries parameters
      envoy:
        ## reasons to retry in connection
        reason:
          ## x-envoy-retry-on
          primary: "5xx,connect-failure"

          ## x-envoy-retry-grpc-on
          grpc: "cancelled,deadline-exceeded,internal,resource-exhausted,unavailable"

        ## count of retries
        count: 30

        ## per retry maximum timeout in seconds
        timeout: 5

      ## exponential backoff attributes
      backoff:
        ## multiplier is the factor with which to multiply backoff(s) after a
        ## failed retry. Should ideally be greater than 1
        multiplier: 1.6

        ## jitter is the factor with which backoff(s) are randomized
        jitter: 0.2

        ## Delays are the amounts of time to backoff after the first failure
        ## and the upper bound of backoff delay
        delay:
          min: 1
          max: 120

  ## Logger format and level
  ##
  logger:
    ## logging format (available formats: json, txt)
    format: json

    ## logging level (0 - debug, 1 - info, 2 - warning, etc)
    level: 0

    ## logging time
    time: false

livenessProbe:
  ## Liveness Probe
  ## If enabled k8s check http end-point /healthz for "Ok" status 200
  ##
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  failureThreshold: 3

readinessProbe:
  ## Readiness Probe
  ## If enabled k8s check http end-point /readyz for "Ok" status 200
  ##
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  failureThreshold: 3

## Resource requests and limits
## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    cpu: 30m
    memory: 64Mi
  requests:
    cpu: 30m
    memory: 32Mi
